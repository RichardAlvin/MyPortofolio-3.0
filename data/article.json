[
    {
        "id": 1,
        "title": "Library & LibreOffice for PDF Processing in .NET",
        "slug": "library-libreoffice-for-pdf-processing-in-net",
        "category": "Development",
        "description": "<p><span class='subtitle'>Mengapa PDF itu penting?</span>Kompatibilitas PDF yang tinggi di berbagai platform, konsistensi konten, mudah dibagikan, diprint, serta ukuran file yang biasanya lebih kecil dibandingkan format lain seperti .ppt, .doc, maupun .xlsx menyebabkan banyak user yang membutuhkan format file PDF. Selain itu terdapat fitur keamanan di PDF seperti password protection dan digital signature.</p><p><span class='subtitle'>Pentingnya Pemilihan Library PDF!!</span>Pemilihan library PDF sangatlah penting untuk program yang kita buat. Rata-rata library PDF yang sesuai dengan kebutuhan kita sudah Open Source atau gratis. Cari library PDF yang mudah diimplementasi dengan dokumentasi yang jelas dan lengkap. Dengan adanya library PDF yang tepat, kita dapat mengefisiensi pengembangan sistem yang kita buat</p><p><span class='subtitle'>PDF Content Extraction</span>Tujuan: Mendapatkan teks dan lokasi teks dari suatu PDFTipe PDF:<ul><li><b>Searchable PDF </b>Teks disimpan secara digital dalam format yang bisa dibaca ulang. Struktur teks bisa diakses termasuk posisi kata dan halaman.</li><li><b>Scanned PDF </b>Konten berupa gambar hasil scan. Sehingga diperlukan teknik OCR untuk mengestrak teks seperti Tesseract OCR, AWS Textract, Google Vision API, Azure AI Vision, dll</li></ul></p><p><span class='subtitle'>PDF Watermark</span>Tujuan: Menandai dokumen agar tidak disalahgunakan dan biasanya dipakai pada Dokumen Resmi, Keuangan, Akademik, Hukum, Konten Digital, dll.Teknik Watermark: Overlay Watermark dan Underlay Watermark</p><p><span class='subtitle'>PDF Conversion</span>Tujuan: Mengkonversi suatu document atau halaman web ke dalam format PDF.Teknik: Menggunakan LibreOffice atau bisa menggunakan rendering engine seperti chromium</p><p><span class='subtitle'>Perbandingan Library PDF</span><img src='/assets/article/library-libreoffice-for-pdf-processing-net/perbandingan-library-pdf.png' /></p><p><span class='subtitle'>Libre Office</span>bersifat open source dikembangkan oleh The Document Foundation. Libre Office dapat menjadi alternatif untuk microsoft office serta ada di berbagai platform OS seperti windows, linux, dan macOS. Kompatible dengan banyak format file serta bisa konversi file secara otomatis melalui command line. Jika ingin explore lebih jauh dapat mengunjungi link berikut: <a href='https://www.libreoffice.org/download/download-libreoffice/'>LibreOffice-Doc</a></p>",
        "image": "/assets/article/library-libreoffice-for-pdf-processing-net/cover.png",
        "isHighlight": true,
        "createdAt": "2025-02-27T10:30:00Z",
        "createdBy": "",
        "updatedAt": ""
    },
    {
        "id": 2,
        "title": "Confused with the .NET version? Here's the explanation!",
        "slug": "confused-with-the-net-version",
        "category": "Development",
        "description": "<p><span class='subtitle'>What is .NET?</span>.NET adalah platform pengembangan sistem IT yang open-source dan lintas platform. .NET menggunakan bahasa pemrograman C# dan berjalan diatas runtime berperforma tinggi. Dengan dukungan manajemen memori otomatis, keamanan tipe data, dan pustaka bawaan yang kaya, .NET dirancang untuk memberikan produktivitas, performa, dan keandalan tinggi bagi para pengembang. .NET dipakai untuk pengembangan API Services, Website, aplikasi mobile, desktop, game development, CLI, AI, IOT, Windows and Cloud services.</p><p><span class='subtitle'>Sejarah Singkat Perjalanan .NET</span><ul><li>Dimulai saat akhir tahun 1990-an yang diberi nama Next Generation Windows Services (NGWS). NGWS ini berfokus dalam peningkatan atau evolusi dari layanan windows yanga ada.</li><li>Tahun 2002, Microsoft merilis .NET Framework 1.0 dengan tujuan membangun aplikasi windows forms, ASP.NET Web Forms yang khusus berjalan di server dan OS windows.</li><li>Tahun 2002 - 2019, .NET terus merilis .NET Framework, dan yang paling akhir adalah .NET Framework 4.8</li><li>Tahun 2014, Microsoft mengumumkan .NET Core yang bersifat open-source dan multi-platform.</li><li>Tahun 2014 - 2019, muncul berbagai versi .NET Core seperti .NET Core 1.1, 2.0 2.1, sampai .NET Core 3.1</li><li>Tahun 2020, Microsoft merilis .NET 5, menggabungkan .NET Framework dan .NET Core menjadi satu platform unifikasi</li><li>Tahun 2020 - 2025, Microsoft terus merilis versi .NET terbaru seperti .NET 6, .NET 8, dan sekarang muncul .NET 9.</li></ul></p><p><span class='subtitle'>Perbedaan .NET Framework, .NET Core, .NET</span><img src='/assets/article/confused-with-the-net-version/different-between-net.png'></p><p class='subtitle'>Referensi:<ul><li><a href='https://learn.microsoft.com/en-us/dotnet/core/introduction'>https://learn.microsoft.com/en-us/dotnet/core/introduction</a></li><li><a href='https://www.clariontech.com/blog/the-.net-revolution-an-overview-of-the-.net-framework-versions'>https://www.clariontech.com/blog/the-.net-revolution-an-overview-of-the-.net-framework-versions</a></li></ul></p>",
        "image": "/assets/article/confused-with-the-net-version/cover.png",
        "isHighlight": true,
        "createdAt": "2025-04-20T00:00:00Z",
        "createdBy": "",
        "updatedAt": ""
    },
    {
        "id": 3,
        "title": "Replication Strategy in SQL Server Management Studio",
        "slug": "replication-strategy-in-sql-server-management-studio",
        "category": "Database",
        "description": "<p><span class='subtitle'>What is SQL Server Replication?</span>Salah satu teknologi pada SQL Server yang mampu menduplikat dan mendistribusikan data dari satu database ke database lainnya serta menyinkronkan data antar database untuk menjaga konsistensi yaitu <b>Replication</b>. Ada tiga tipe replication yang tersedia pada SQL Server:<ul><li>Transactional Replication</li><li>Merge Replication</li><li>Snapshot Replication</li></ul></p><p><span class='subtitle'>Common Use Cases</span><ul><li>Replikasi ke database lain, jadi satu database untuk menulis data dan database replikasi lainnya untuk membaca data. Mengurangi beban pada database tulis.</li><li>Share data ke database lainnya yang membutuhkan pembaruan data.</li><li>Data warehousing and reporting.</li></ul></p><p><span class='subtitle'>Preparation Transactional Replication</span>Membuat dua database, DatabaseA (tempat insert, update, delete data) dan DatabaseB (tempat read data). DatabaseA akan menyinkronkan dan mereplikasikan datanya ke DatabaseB. Install SQL Server Replication dengan membuka file SQL Server 2022 Installation Center. Pilih New SQL Server Standalone Installation or add features to an existing installation.<img src='/assets/article/replication-strategy-in-sql-server-management-studio/install-replication-1.png'/>Pilih folder Developer_ENU dan klik Ok.<img src='/assets/article/replication-strategy-in-sql-server-management-studio/install-replication-2.png'/>Setelah itu akan masuk ke SQL Server 2022 Setup. Disini kita next aja sampai di submenu Installation Type, pilih \"Add features to an existing instance of SQL Server 2022\".<img src='/assets/article/replication-strategy-in-sql-server-management-studio/install-replication-3.png'/>Pada menu Feature Selection, centang \"SQL Server Replication\" dan klik next sampai installation complete.<img src='/assets/article/replication-strategy-in-sql-server-management-studio/install-replication-4.png'/><img src='/assets/article/replication-strategy-in-sql-server-management-studio/install-replication-5.png'/></p><p><span class='subtitle'>Build Local Publications</span><ul><li>Di SSMS, buka folder replication</li><li>Create new local publications</li><li>Pada publication database, pilih database yang akan direplikasi</li><li>Pilih Transactional publication</li><li>Pilih tabel yang ingin direplikasi</li><li>Pada snapshot agent, pilih create a snapshot immediately</li><li>Connect to publisher by impersonating the process account</li><li>Finish create publication</li></ul><img src='/assets/article/replication-strategy-in-sql-server-management-studio/create-publication-1.png' /><img src='/assets/article/replication-strategy-in-sql-server-management-studio/create-publication-2.png'/></p><p><span class='subtitle'>Build Local Subscriptions</span><ul><li>Di SSMS, buka folder replication</li><li>Create new local subscriptions</li><li>Pilih publication yang tadi kita buat</li><li>Pilih run all agents at the distributor (push subscriptions)</li><li>Pilih subscriber database yang menjadi subscriber</li><li>Pada Distribution Agent Security, pilih By Impersonating the process account</li><li>Finish create subscription</li></ul><img src='/assets/article/replication-strategy-in-sql-server-management-studio/create-subscription-1.png' /><img src='/assets/article/replication-strategy-in-sql-server-management-studio/create-subscription-2.png'/></p><p><span class='subtitle'>Replication Configuration</span>Buka replication monitor pada publikasi, terlihat disana replikasi masih belum berjalan dan perlu dikonfigurasi terlebih dahulu. Pada publikasi yang telah dibuat, pilih tab menu agent. Klik start snapshot agent.<img src='/assets/article/replication-strategy-in-sql-server-management-studio/replication-configuration-1.png' />Tips and trick jika start agent gagal:<ul><li>Jika tidak bisa start agent, maka coba cek services windows, dan restart SQL Server Agent (MSSQLSERVER)</li><li>Jika muncul error dimana gagal mengakses folder repldata, maka bisa cek SQL Server Agent (MSSQLSERVER) -> properties -> log on -> ambil account yang dipakai untuk menjalankan services tersebut. Gunakan user tersebut untuk menambahkan user ke security folder repldata dan menambahkan akses write maupun full access</li></ul></p><p><span class='subtitle'>Testing and Result</span>Ketika kita cek databaseB, maka akan terlihat data yang ada di databaseA tereplikasi ke databaseB.<img src='/assets/article/replication-strategy-in-sql-server-management-studio/result-1.png' /></p><p class='subtitle'>Referensi:<ul><li>Pengalaman pribadi selama bekerja</li><li><a href='https://learn.microsoft.com/en-us/sql/relational-databases/replication/sql-server-replication?view=sql-server-ver16'>https://learn.microsoft.com/en-us/sql/relational-databases/replication/sql-server-replication?view=sql-server-ver16</a></li><li><a href='https://learn.microsoft.com/en-us/sql/relational-databases/replication/administration/best-practices-for-replication-administration?view=sql-server-ver16'>https://learn.microsoft.com/en-us/sql/relational-databases/replication/administration/best-practices-for-replication-administration?view=sql-server-ver16</a></li></ul></p>",
        "image": "/assets/article/replication-strategy-in-sql-server-management-studio/cover.png",
        "isHighlight": true,
        "createdAt": "2025-04-18T10:30:00Z",
        "createdBy": "",
        "updatedAt": ""
    },
    {
        "id": 4,
        "title": "Teknik Akses Data pada .NET + PostgreSQL untuk Optimasi Query",
        "slug": "teknik-akses-data-net-postgresql-untuk-optimasi-query",
        "category": "Development",
        "description": "<p><span class='subtitle'>Kenapa Penting?</span><ul><li>Performa aplikasi baik = User Experience meningkat</li><li>User dan data semakin bertambah</li><li>Efisiensi Resources daripada harus mengeluarkan dana untuk menambah CPU, RAM, bandwidth dan lainnya</li><li>Maintainability dan Reusability</li></ul></p><p><span class='subtitle'>Raw SQL</span>Menulis SQL langsung tapi masih dalam kerangka ORM seperti EF Core</br><b>Keuntungan:</b> Raw SQL dapat digunakan untuk memanggil view / function / sp, tidak perlu belajar ORM, kontrol penuh query.</br><b>Kekurangan:</b> Rentan salah penulisan, bug, sql injection, sulit melakukan pemeliharaan.</br><b>Penggunaan:</b> Query join multi table dengan logika khusus yang tidak bisa menggunakan ORM. Logika khusus seperti CTE, window function, dll.<img src='/assets/article/teknik-akses-data-net-postgresql-untuk-optimasi-query/raw-sql.png' /></p><p><span class='subtitle'>Entity Framework Core</span>mengakses database melalui object model tanpa menulis SQL. EF Core mengelola query melalui LINQ dan dapat dikombinasikan dengan projection dan no tracking.</br><b>Keuntungan:</b> EF Core mudah digunakan dan cepat dalam pengembangan. EF Core juga mudah dalam pemeliharaan kode program.</br><b>Kekurangan:</b> Performa EF Core kurang optimal dibandingkan raw SQL. Selain itu juga perlu belajar EF Core dan LINQ ditambah konfigurasinya.</br><b>Penggunaan:</b> Web app yang butuh cepat dalam pengembangan dan pemeliharaan dan aplikasi yang perlu cross database seperti SQL Server, PostgreSQL.<img src='/assets/article/teknik-akses-data-net-postgresql-untuk-optimasi-query/ef-core.png' /></p><p><span class='subtitle'>Dapper</span>Dapper merupakan micro ORM ringan untuk .NET yang mengeksekusi raw SQL dan mapping otomatis.</br><b>Keuntungan:</b> Cepat, ringan dan mudah dipadukan dengan raw SQL.</br><b>Kekurangan:</b> kurang lengkap fitur ORM dan perlu menulis SQL secara eksplisit.</br><b>Penggunaan:</b> butuh API yang response cepat, ringan, dan efisien.<img src='/assets/article/teknik-akses-data-net-postgresql-untuk-optimasi-query/dapper.png' /></p><p><span class='subtitle'>View</span>Query SQL disimpan di database sebagai objek virtual yang terlihat seperti table tapi hasilnya dinamis.</br><b>Keuntungan:</b> query dapat mudah dipakai ke proses lainnya (reusable) dan dapat menyembunyikan kompleksitas query dari aplikasi.</br><b>Kekurangan:</b> tidak ada caching dan tidak bisa diindex.</br><b>Penggunaan:</b> membuat laporan sederhana banyak join table.<img src='/assets/article/teknik-akses-data-net-postgresql-untuk-optimasi-query/view.png' /></p><p><span class='subtitle'>Materialized View</span>Mirip seperti view, tapi hasil query disimpan secara fisik (cache) di database. Materialized view disimpan di disk dan bisa persistance jadi kalau restart bisa tetap ada.</br><b>Keuntungan:</b> Performa jauh lebih cepat dan bisa di index</br><b>Kekurangan:</b> Data tidak bisa up to date (harus direfresh manual/otomatis) dan butuh storage tambahan.</br><b>Penggunaan:</b> dipakai untuk data yang besar tapi dak perlu real time, contoh buat report, dashboard yang datanya perlu direfresh satu hari sekali. Materialized view dapat dikombinasikan dengan trigger, jadi ketika ada input data, trigger tersebut akan merefresh data pada materialized view.<img src='/assets/article/teknik-akses-data-net-postgresql-untuk-optimasi-query/materialized-view.png' /></p><p><span class='subtitle'>Function</span>Kumpulan perintah SQL yang disimpan dieksekusi di database server.</br><b>Keuntungan:</b> Bisa kompleks logic dan bisa tambah parameter query untuk filter dan lainnya.</br><b>Kekurangan:</b> Debug dan maintenance sulit serta lebih lambat dibandingkan view dan materialized view.</br><b>Penggunaan:</b> aplikasi yang butuh batch update dan perhitungan kompleks di database.<img src='/assets/article/teknik-akses-data-net-postgresql-untuk-optimasi-query/function.png' /></p><p><span class='subtitle'>Uji Performa</span>Untuk menguji performa teknik akses data diatas, saya menggunakan package Benchmark.Dotnet. Hasil uji performa dapat dilihat pada gambar di bawah:<img src='/assets/article/teknik-akses-data-net-postgresql-untuk-optimasi-query/result.png' />Dari hasil diatas, dapat disimpulkan beberapa poin berikut:<ul><li>Pengggunaan Materialized View + Dapper merupakan kombinasi tercepat untuk akses data</li><li>Penggunaan projection dan no tracking membantu mempercepat performa pemrosesan data</li><li>Dapper memiliki alokasi memori yang lebih besar dibandingkan metode yang lain. Dikarenakan Dapper melakukan mapping manual menggunakan IL.Emit (proses lebih cepat tapi alokasi memori lebih banyak)</li><li>Penggunaan Stored Procedure dan View, cocok untuk tim terpisah antara backend dan DBA</li><li>Tingginya Standar Deviasi dan Error pada Raw SQL dan EF Core dikarenakan adanya entity tracking yang menambah overhead dan fluktuasi performa</li><li>Dapper memiliki garbage collection yang lebih tinggi dari metode lainnya karena menciptakan banyak obyek kecil (Gen 0) dan obyek bertahan (Gen 1)</li><li>EF Core dengan tracking di Gen 1 bernilai '-' karena alokasi obyek hanya hidup di Gen 0 saja dan langsung dibersihkan ketika sudah selesai</li><li>EF Core lambat karena banyak overhead (tracking, parsing Linq, Materialisasi) tetapi memori yang dialokasikan lebih sedikit</li></ul></p>",
        "image": "/assets/article/teknik-akses-data-net-postgresql-untuk-optimasi-query/cover.png",
        "isHighlight": false,
        "createdAt": "2025-06-28T00:00:00Z",
        "createdBy": "",
        "updatedAt": ""
    },
    {
        "id": 5,
        "title": "Analysis & Design Shopee-like E-Commerce Web System",
        "slug": "analysis-design-shopee-like-ecommerce-web-system",
        "category": "Development",
        "description": "<p><span class='subtitle'>Functional Requirements</span>geegra</p><p><span class='subtitle'>Non-Functional Requirements</span></p><p><span class='subtitle'>DAU / MAU</span></p>",
        "image": "/assets/article/analysis-design-shopee-like-ecommerce-web-system/cover.png",
        "isHighlight": false,
        "createdAt": "2025-02-27T10:30:00Z",
        "createdBy": "",
        "updatedAt": ""
    }
]